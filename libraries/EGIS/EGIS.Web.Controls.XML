<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EGIS.Web.Controls</name>
    </assembly>
    <members>
        <member name="T:EGIS.Web.Controls.GeoJsonObject">
            <summary>
            abstract base GeoJSON class
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.FeatureCollection">
            <summary>
            GeoJSON FeatureCollection
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.Feature">
            <summary>
            GeoJSON Feaure
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.Geometry">
            <summary>
            abstract GeoJSON base Geometry class
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.Point">
            <summary>
            GeoJSON Point
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.LineString">
            <summary>
            GeoJSON LineString
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.Polygon">
            <summary>
            GeoJSON Polygon
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.StyleOptions">
            <summary>
            GeoJSON equivalent of google.maps.Data.StyleOptions object specification
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.ISFMap">
            <summary>
            Interface defining methods needed by MapPanControl to interact with SFMap and TiledSFMap classes.
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.ISFMap.ControlId">
            <summary>
            the Id of the MapControl
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.ISFMap.GisImageClientId">
            <summary>
            The client Id of the Map's GIS Image
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.ISFMap.ClientJSResouceName">
            <summary>
            the name of the Javascript resource used by the ISFMap, which is different depending on
            whether a TiledSfMap or simple SFMap is used
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.MapPanControl">
            <summary>
            Web Control which provides pan and zoom control for a map
            </summary>
            <remarks>    
            <para>The MapPanControl control is a composite control that provides 4 pan buttons (left, right, up, down), a zoom-in and a zoom-out button.</para>
            <para>The control can be customized by specifying a new Image Url for each of the pan or zoom buttons.</para>
            <para> Each button is rendered as an "input" HTML element. To specify the CSS style of the buttons specify a class for the control and supply a style for the .class input, as shown below</para>
            <code>
            &lt;style type="text/css"&gt; .mpc input {padding:2px;} &lt;/style&gt;
            ..
            &lt;cc1:MapPanControl class="mpc" ID="MapPanControl1" runat="server" /&gt; </code>
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.MapPanControl.#ctor">
            <summary>
            MapPanControl constructor
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.MapPanControl.SetMap(EGIS.Web.Controls.ISFMap)">
            <summary>
            Sets a reference to the SFMap Web Control that the MapPanControl will interact with
            </summary>
            <param name="map">the SFMap control</param>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanLeftClientJS">
            <summary>
            returns the javascript code in order to pan the map left
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanRightClientJS">
            <summary>
            returns the javascript code in order to pan the map right
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanUpClientJS">
            <summary>
            returns the javascript code in order to pan the map up
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanDownClientJS">
            <summary>
            returns the javascript code in order to pan the map down
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.ZoomInClientJS">
            <summary>
            returns the javascript code in order to zoom in to the map (X2)
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.ZoomOutClientJS">
            <summary>
            returns the javascript code in order to zoom out of the map (X2)
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.MapPanControl.OnPreRender(System.EventArgs)">
            <summary>
            overrides OnPreRender in CompositeControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EGIS.Web.Controls.MapPanControl.CreateChildControls">
            <summary>
            overrides CreateChildControls in CompositeControl
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.MapPanControl.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            overrides RenderChildren in CompositeControl
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.TagKey">
            <summary>
            overrides TagKey in WebControl. returns div tag
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.MapReferenceId">
            <summary>
            gets/sets the ID of the ISFMap that the pan control will interact with
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanLeftImageUrl">
            <summary>
            Gets or sets the Url of an image to use for the "Pan Left" button
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanRightImageUrl">
            <summary>
            Gets or sets the Url of an image to use for the "Pan Right" button
            </summary>        
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanUpImageUrl">
            <summary>
            Gets or sets the Url of an image to use for the "Pan Up" button
            </summary>        
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.PanDownImageUrl">
            <summary>
            Gets or sets the Url of an image to use for the "Pan Down" button
            </summary>        
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.ZoomInImageUrl">
            <summary>
            Gets or sets the Url of an image to use for the "Zoom In" button
            </summary>        
        </member>
        <member name="P:EGIS.Web.Controls.MapPanControl.ZoomOutImageUrl">
            <summary>
            Gets or sets the Url of an image to use for the "Zoom Out" button
            </summary>        
        </member>
        <member name="T:EGIS.Web.Controls.VectorTileGenerator">
             <summary>
             Utility class to generate Vector Tile data from ShapeFile layers.
             </summary>
             <remarks>
             <para>
             This class can be combined with EGIS.Mapbox.Vector.Tile.VectorTileParser to create Mapbox vector tiles.
             </para>
             </remarks>
             <example> Sample code to create a Mapbox Vector Tile from a shapefile. 
             <code>        
            public void CreateMapboxTile(List&lt;ShapeFile&gt; mapLayers, string vectorTileFileName)
            {
                //create a VectorTileGenerator
                VectorTileGenerator tileGenerator = new VectorTileGenerator();
                List&lt;VectorTileLayer&gt; tileLayers = tileGenerator.Generate(tileX, tileY, zoomLevel, mapLayers);
                //encode the vector tile in Mapbox vector tile format
                using (System.IO.FileStream fs = new System.IO.FileStream(vectorTileFileName, System.IO.FileMode.Create))
                {
                    EGIS.Mapbox.Vector.Tile.VectorTileParser.Encode(tileLayers, fs);
                }
            }
             </code>                                                   
             </example>
        </member>
        <member name="T:EGIS.Web.Controls.VectorTileGenerator.OutputTileFeatureDelegate">
            <summary>
            delegate to return whether a feature should be output at a given zoom level and tile coordinates
            </summary>
            <param name="shapeFile"></param>
            <param name="recordIndex"></param>
            <param name="tileZ"></param>
            <param name="tileX"></param>
            <param name="tileY"></param>
            <returns></returns>
        </member>
        <member name="M:EGIS.Web.Controls.VectorTileGenerator.#ctor">
            <summary>
            VectorTileGenerator constructor 
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileGenerator.TileSize">
            <summary>
            The size of the vector tiles
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileGenerator.SimplificationPixelThreshold">
            <summary>
            Simplification Threshold. Default is 1
            </summary>
            <remarks>
            This property will simplify geometry points when the vector data is generated at lower tile
            zoom levels. In general this property should not be changed from the default value of 1
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileGenerator.OutputMeasureValues">
            <summary>
            whether to output PolylineM Measures.
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileGenerator.MeasuresAttributeName">
            <summary>
            Output Measures Attribute name. Default is "_MValues"
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.VectorTileGenerator.Generate(System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{EGIS.ShapeFileLib.ShapeFile},EGIS.Web.Controls.VectorTileGenerator.OutputTileFeatureDelegate)">
            <summary>
            Generates a Vector Tile from ShapeFile layers
            </summary>
            <param name="tileX">Tile X coordinate</param>
            <param name="tileY">Tile Y coordinate</param>
            <param name="zoomLevel">Tile zoom level</param>
            <param name="layers">List of ShapeFile layers</param>
            <param name="outputTileFeature">optional OutputTileFeatureDelegate which will be called with each record feature that will be added to the tile. This delegate is useful to exclude feaures at tile zoom levels</param>
            <returns></returns>
        </member>
        <member name="T:EGIS.Web.Controls.VectorTileHandler">
            <summary>
            Generic IHttpHandler handler that serves Mapbox .mvt Vector Tiles 
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileHandler.CacheOnServer">
            <summary>
            Whether or not to cache requested image requests on the server
            </summary>
            <remarks>Default value is true. Derived classes should override if neccessary</remarks>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileHandler.CacheDirectory">
            <summary>
            Name of the directory (relative to the handler) used to store cached images
            </summary>
            <remarks>Default value is "tilecache". Derived classes should override if a different directory is required.
            <para>Note it may be neccessary to grant write permissions on the directory</para></remarks>        
        </member>
        <member name="M:EGIS.Web.Controls.VectorTileHandler.CreateCachePath(System.Web.HttpContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates path to a tile request if CacheOnServer is true
            </summary>
            <param name="context"></param>
            <param name="tileX"></param>
            <param name="tileY"></param>
            <param name="zoom"></param>
            <returns></returns>
            <remarks>Default name is  CacheDirectory/zoom_tileX_tileY.mvt </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.VectorTileHandler.CreateMapLayers(System.Web.HttpContext)">
            <summary>
            Abstract method to create the Map layers for the request
            </summary>
            <param name="context"></param>
            <returns></returns>
            <remarks>Derived classes must implement the CreateMapLayers method</remarks>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileHandler.TileSize">
            <summary>
            Vector Tile Size. Default is 512 x 512
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.VectorTileHandler.SimplificationPixelThreshold">
            <summary>
            Simplification Threshold. Default is 1
            </summary>
            <remarks>
            This property will simplify geometry points when the vector data is generated at lower tile
            zoom levels. In general this property should not be changed from the default value of 1
            </remarks>
        </member>
        <member name="T:EGIS.Web.Controls.TooltipHeaderFieldNamePair">
            <summary>
            Simple Header / FieldName Pair class used to provide custom ToolTips in the QuantileCustomRenderSettings
            </summary>
            <remarks>
            <para>Each TooltipHeaderFieldNamePair object represents a single line that is displayed in a tooltip.</para>
            </remarks>
            <seealso cref="T:EGIS.Web.Controls.QuantileCustomRenderSettings"/>
        </member>
        <member name="P:EGIS.Web.Controls.TooltipHeaderFieldNamePair.HeaderText">
            <summary>
            Gets or sets the text to appear as the header of a line in a tooltip
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TooltipHeaderFieldNamePair.FieldName">
            <summary>
            Gets or sets the name of the DBF field (or column in joined table) to get the tooltip data from.
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.TooltipHeaderFieldNamePair.#ctor(System.String,System.String)">
            <summary>
            Constructs a new TooltipHeaderFieldNamePair object
            </summary>
            <param name="headerText">The text to appear as the header of a line in a tooltip</param>
            <param name="fieldName">The name of the DBF field (or column in joined table) to get the tooltip data from </param>
        </member>
        <member name="T:EGIS.Web.Controls.QuantileCustomRenderSettings">
            <summary>
            QuantileCustomRenderSettings implements the ICustomRenderSettings interface and is used to 
            provide dynamic render settings.
            </summary>
            <remarks>
            <para>
            QuantileCustomRenderSettings is used to render individual shape colors in a shapefile layer according to a specified range of values. For example,
            the color of the rendered shape could be green if field1 is between 0 and 100, yellow if field 1 is between 100 and 200, or red if
            it is greater than 200.
            </para>
            <para>The class also provides the ability to join an external DataTable on a shapefile's DBF data file</para>
            </remarks>
            <seealso cref="T:EGIS.ShapeFileLib.ICustomRenderSettings"/>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.#ctor(EGIS.ShapeFileLib.RenderSettings,System.Drawing.Color[],System.Double[],System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            Constructs a new QuantileCustomRenderSettings instance
            </summary>
            <param name="renderSettings">Reference to a ShapeFile RenderSettings</param>
            <param name="quantileColors">Array of Colors to use. The number of Color elements should be 1 more than the number of quantile elements</param>
            <param name="quantiles">Array of quantile values. Each successive element must be greater than the previous element. Example - {10, 50, 75}</param>
            <param name="quantileKey">The name of the column in the imported data used to determine what color to render a shape </param>
            <param name="importData">Data to join on the shapefile layer.</param>
            <param name="shapeJoinKey">The column in the shapefile layer's dbf file used to join to importData</param>
            <param name="importJoinKey">The column in importData used to join on the shapefile layer</param>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.#ctor(EGIS.ShapeFileLib.RenderSettings,System.Drawing.Color[],System.Double[],System.String,System.Data.DataTable,System.String,System.String,System.Collections.Generic.List{EGIS.Web.Controls.TooltipHeaderFieldNamePair})">
            <summary>
            Constructs a new QuantileCustomRenderSettings instance
            </summary>
            <param name="renderSettings">Reference to a ShapeFile RenderSettings</param>
            <param name="quantileColors">Array of Colors to use. The number of Color elements should be 1 more than the number of quantile elements</param>
            <param name="quantiles">Array of quantile values. Each successive element must be greater than the previous element. Example - {10, 50, 75}</param>
            <param name="quantileKey">The name of the column in the imported data used to determine what color to render a shape </param>
            <param name="importData">Data to join on the shapefile layer.</param>
            <param name="shapeJoinKey">The column in the shapefile layer's dbf file used to join to importData</param>
            <param name="importJoinKey">The column in importData used to join on the shapefile layer</param>
            <param name="tooltipHeaderFieldList">List of TooltipHeaderFieldNamePair objects used to create a custom tooltip</param>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.#ctor(EGIS.ShapeFileLib.RenderSettings,System.Drawing.Color[],System.Double[],System.String)">
            <summary>
            Constructs a new QuantileCustomRenderSettings instance
            </summary>
            <param name="renderSettings">Reference to a ShapeFile RenderSettings</param>
            <param name="quantileColors">Array of Colors to use. The number of Color elements should be 1 more than the number of quantile elements</param>
            <param name="quantiles">Array of quantile values. Each successive element must be greater than the previous element. Example - {10, 50, 75}</param>
            <param name="shapeFieldName">The name of the shapefile dbf field used to determine what color to render a shape </param>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.#ctor(EGIS.ShapeFileLib.RenderSettings,System.Drawing.Color[],System.Double[],System.String,System.Collections.Generic.List{EGIS.Web.Controls.TooltipHeaderFieldNamePair})">
            <summary>
            Constructs a new QuantileCustomRenderSettings instance
            </summary>
            <param name="renderSettings">Reference to a ShapeFile RenderSettings</param>
            <param name="quantileColors">Array of Colors to use. The number of Color elements should be 1 more than the number of quantile elements</param>
            <param name="quantiles">Array of quantile values. Each successive element must be greater than the previous element. Example - {10, 50, 75}</param>
            <param name="shapeFieldName">The name of the shapefile dbf field used to determine what color to render a shape </param>
            <param name="tooltipHeaderFieldList">List of TooltipHeaderFieldNamePair objects used to create a custom tooltip</param>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.GetRecordFillColor(System.Int32)">
            <summary>
            Implementation of the ICustomRenderSettings GetRecordFillColor member
            </summary>
            <param name="recordNumber"></param>
            <returns></returns>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.RenderShape(System.Int32)">
            <summary>
            Implementation of the ICustomRenderSettings RenderShape member
            </summary>
            <param name="recordNumber"></param>
            <returns></returns>
        </member>
        <member name="M:EGIS.Web.Controls.QuantileCustomRenderSettings.GetRecordToolTip(System.Int32)">
            <summary>
            Implementation of the ICustomRenderSettings GetRecordToolTip member
            </summary>
            <param name="recordNumber"></param>
            <returns></returns>
        </member>
        <member name="P:EGIS.Web.Controls.QuantileCustomRenderSettings.UseCustomTooltips">
            <summary>
            Implementation of the ICustomRenderSettings UseCustomTooltips member
            </summary>
        </member>
        <member name="T:EGIS.Web.Controls.SFMap">
            <summary>
            ASP .NET Mapping Control which loads and displays an Easy GIS .NET map project in a web page.
            </summary>
            <remarks>    
            <para>This is the main control in the EGIS.Web.Controls namespace.
            The SFMap control is a composite control that looks and behaves the same as the Desktop EGIS.Controls.SFMap Control and is 
            used to display and interact with a map in a web page. </para>
            <para>
            <para>An Easy GIS .NET project is composed of a number of Shapefiles and can be designed using the Desktop Edition of 
            Easy GIS .NET. The project should be exported and copied to the web server hosting the page where the SFMap Web Control will be used. For more 
            information on how to export a project ready to load in a web page see <a href = "http://www.easygisdotnet.com/api">Easy GIS .NET Developers page</a> </para>
            The SFMap Control generates all map images on the hosting web server using an IHttpHandler. All requests are performed automatically on the 
            client's web browser using JavaScript and AJAX, resulting in a map that can be panned and zoomed in or out without refreshing the
            web page for each request.
            </para>
            <para>    
            NOTE: In order for the server to render maps an entry in the httpHandlers section of the web.config file must be made.
            If the SFMap Control is added to a page using the design view in Visual Studio an entry is added to the web.config file automatically, however
            if the Control is manually added to a page it will be neccessary to add the following section to the config file.
            <code>
            &lt;httpHandlers&gt;
                   &lt;add path="egismap.axd" verb="*" type="EGIS.Web.Controls.SFMapImageProvider, EGIS.Web.Controls, Version=2.3.0.0, Culture=neutral, PublicKeyToken=05b98c869b5ffe6a"
                       validate="true" /&gt;
               &lt;/httpHandlers&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.OnInit(System.EventArgs)">
            <summary>
            overrides OnInit in CompositeControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.TagKey">
            <summary>
            overrides the TagKey property. Returns a Div Tag.
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.CreateChildControls">
            <summary>
            overrides CreateChildControls in CompositeControl
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.GisImageClientId">
            <summary>
            returns the Client id of the internal  GIS Image. This is used by controls only
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.ClientJSResouceName">
            <summary>
            returns the name of the client javascript resource used to control the map.
            </summary>
            <remarks>
            <para>this method implements the ClientJSResouceName method of ISFMap interface</para>
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.ControlId">
            <summary>
            returns the client id of the map
            </summary>
            <remarks>
            <para>this method implements the ClientJSResouceName method of ISFMap interface</para>
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.OnPreRender(System.EventArgs)">
            <summary>
            overrides OnPreRender in CompositeControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.CreateMap">
            <summary>
            Reads the EGIS shapefile project and creates the map
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.ReadEGPProject(System.String)">
            <summary>
            static method to read a .egp project file
            </summary>
            <param name="absPath">Absolute path of the .egp file</param>
            <returns>A MapProject object containing the project layers and map background color</returns>
            <remarks>This method provides an easy means of creating a List of ShapeFiles to be used
            in a MapHandler</remarks>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.LayerCount">
            <summary>
            returns the number of layers in the SFMap Control
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.GetLayer(System.Int32)">
            <summary>
            Method to get a ShapeFile layer at the specified index
            </summary>
            <param name="index">zero-based index of layer to return</param>
            <returns> The requested ShapeFile layer</returns>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.SetCustomRenderSettings(System.Int32,EGIS.ShapeFileLib.ICustomRenderSettings)">
            <summary>
            Applies custom render settings to the specified layer
            </summary>
            <remarks>
            <para>
            The ICustomRenderSettings object is stored in the session settings, meaning that the custom render settings are 
            applied per user's session.
            </para>
            <para>If Custom Render Settings are used then it is usualy neccessary to set CacheOnClient to False
            </para>
            
            </remarks>
            <param name="layerIndex">The zero-based index of the layer to apply the custom render settings</param>
            <param name="settings">An ICustomRenderSettings object to set on the specified shapefile</param>        
            <seealso cref="T:EGIS.ShapeFileLib.ICustomRenderSettings"/>
            <seealso cref="T:EGIS.Web.Controls.QuantileCustomRenderSettings"/>
            <seealso cref="P:EGIS.Web.Controls.SFMap.CacheOnClient"/>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.ClearCustomRenderSettings">
            <summary>
            Clears any ICustomRenderSettings previously set on the layers of the map
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> object that receives the control content.</param>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.RegisterHandlerInConfiguration">
            <summary>
            Registers the Http Handler in configuration.
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.RenderDesignTime(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control at design time.
            </summary>
            <param name="writer">The html writer.</param>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.Extent">
            <summary>
            Gets the rectangular extent of the entire map
            </summary>
            <remarks>
            Extent is the rectangular extent of the ENTIRE map, regardless of the current ZoomLevel or CentrePoint.  
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.ImageSource">
            <summary>
            Gets the image real src that points to the http handler.
            It is used as a key for the server cache so shoud be overriden with caution.
            </summary>
            <value>The image src.</value>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.HttpHandlerType">
            <summary>
            Gets the type of the http handler used to render the map on the server.
            </summary>        
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.HttpHandlerName">
            <summary>
            Gets the name of the http handler used to render the map on the server.
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.ProjectName">
            <summary>
            Gets or sets the name of the Easy GIS .NET (.egp) project to load in the map.
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.CenterPoint">
            <summary>
            Gets or sets the center point of the map in mapping coordinates (as used by the shapefiles)
            </summary>
            <remarks>
            Changing the CenterPoint can be used to center the map on a new location without 
            changing the map scale
            <para>
            The ZoomLevel, CenterPoint, Width and Height of the SFMap determine the location and visible area of the rendered map. The map will be rendered 
            centered at the CenterPoint and scaled according to the ZoomLevel.
            </para>
            </remarks>
            <seealso cref="P:EGIS.Web.Controls.SFMap.Zoom"/>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.Zoom">
            <summary>
            Gets or sets the current ZoomLevel of the SFMap
            </summary>
            <remarks>
            Changing the ZoomLevel will zoom into or out of the map. Increasing the ZoomLevel will zoom into the map, while decreasing the 
            ZoomLevel will zoom out of the map
            <para>
            The ZoomLevel, CenterPoint, Width and Height of the SFMap determine the location and visible area of the rendered map. The map will be rendered 
            centered at the CenterPoint and scaled according to the ZoomLevel.
            </para>
            </remarks>
            <seealso cref="P:EGIS.Web.Controls.SFMap.CenterPoint"/>
            <exception cref="T:System.ArgumentException"> if ZoomLevel less than or equal to zero</exception>        
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.MinZoomLevel">
            <summary>
            Gets or Sets the Minimum Allowed ZoomLevel. This is the minimum ZoomLevel that can be set before 
            the map can no longer be zoomed out.
            </summary>     
            <seealso cref="P:EGIS.Web.Controls.SFMap.MaxZoomLevel"/>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.MaxZoomLevel">
            <summary>
            Gets or Sets the Maximum Allowed ZoomLevel. This is the maximum ZoomLevel that can be set before 
            the map can no longer be zoomed in.
            </summary>        
            <seealso cref="P:EGIS.Web.Controls.SFMap.MinZoomLevel"/>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.OnClientZoomChanged">
             <summary>
             Gets or sets the client-side script that executes when the map ZoomLevel changes
             </summary>
             <remarks>
             When the zoom level changes a client-side javascript event will be fired with the the following 3 parameters
             <list type="bullet">
             <item>
             <term>type</term>
             <description>The event type (="ZoomChanged"). This can be ignored</description>
             </item>
             <item>
             <term>args</term>
             <description>args[0] contains the current zoom level</description>
             </item>
             <item>
             <term>obj</term>
             <description>The object generating the event. This can be ignored.</description>
             </item>
             </list>
             
             <example>
             <code>        
             function MapZoomChanged(type, args, obj)
            {        
                var debugpanel = document.getElementById('debugpanel');
                debugpanel.innerHTML = '[' + obj.toString() + ',' + type + ']Current Zoom: ' + args[0] + '&lt;br/&gt;' + debugpanel.innerHTML;        
            }
             ..
             &lt;div id = "debugpanel" ..
             </code>
             In this example OnClientZoomChanged would be set to "MapZoomChanged"
             </example>
             </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.OnClientBoundsChanged">
             <summary>
             Gets or sets the client-side script that executes when the map Bounds are changed
             </summary>
             <remarks>
             When the map bounds change a client-side javascript event will be fired with the the following 3 parameters
             <list type="bullet">
             <item>
             <term>type</term>
             <description>The event type (="BoundsChanged"). This can be ignored</description>
             </item>
             <item>
             <term>args</term>
             <description>The new map bounds. args[0] contains MinX, args[1] contains MaxY, args[2] contains MaxX, args[3] contains MaxY</description>
             </item>
             <item>
             <term>obj</term>
             <description>The object generating the event. This can be ignored.</description>
             </item>
             </list>
             
             <example>
             <code>        
            function MapBoundsChanged(type, args, obj)
            {
               var debugPanel = document.getElementById('debugpanel');            
               debugPanel.innerHTML = '[' + obj.toString() + ',' + type + ']Current Bounds: ' + args[0] + ',' + args[1] +  ',' + args[2] + ',' + args[3] + '<br/>' + debugPanel.innerHTML ;
            }
             ..
             &lt;div id = "debugpanel" ..
             </code>
             In this example OnClientBoundsChanged would be set to "MapBoundsChanged"
             </example>
             </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.SFMap.CacheOnClient">
            <summary>
            Gets or sets whether to use client-side caching of any generated map image.
            </summary>
            <remarks>
            <para>By default CacheOnClient will be set to true. This means that cache-specific HTTP headers will be set on generated
            map images. This will generally improve map performance as successive map images are cached by client web-browsers, however in
            some cases this is not desirable.</para>
            <para>If you are using CustomRenderSettings then it may be neccessary to set CacheOnClient ot False</para>        
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.LoadViewState(System.Object)">
            <summary>
            overrides LoadViewState in WebControl
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:EGIS.Web.Controls.SFMap.RenderMap(System.Drawing.Image,System.Web.HttpContext)">
            <summary>
            convenience method to render the currently loaded map to a bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="context"></param>
        </member>
        <member name="T:EGIS.Web.Controls.TiledMapHandler">
            <summary>
            Generic IHttpHandler for handling TiledMap requests
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TiledMapHandler.CacheOnServer">
            <summary>
            Whether or not to cache requested image requests on the server
            </summary>
            <remarks>Default value is true. Derived classes should override if neccessary</remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledMapHandler.CacheDirectory">
            <summary>
            Name of the directory (relative to the handler) used to store cached images
            </summary>
            <remarks>Default value is "tilecache". Derived classes should override if a different directory is required.
            <para>Note it may be neccessary to grant write permissions on the directory</para></remarks>        
        </member>
        <member name="P:EGIS.Web.Controls.TiledMapHandler.MapBackgroundColor">
            <summary>
            Color used to render the background of map tile images
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EGIS.Web.Controls.TiledMapHandler.CreateCachePath(System.Web.HttpContext,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:EGIS.Web.Controls.TiledMapHandler.CreateMapLayers(System.Web.HttpContext)">
            <summary>
            Abstract method to create the Map layers for the request
            </summary>
            <param name="context"></param>
            <returns></returns>
            <remarks>Derived classes must implement the CreateMapLayers method</remarks>
        </member>
        <member name="M:EGIS.Web.Controls.TiledMapHandler.OnBeginRequest(System.Web.HttpContext)">
            <summary>
            virtual method to create the Map layers and custom render settings for the request
            </summary>
            <param name="context"></param>
            <returns></returns>
            <remarks>
            <para>The default method just calls CreateMapLayers(context) and sets renderSettings to null</para>
            <para>If you are using custom render settings layers.Count must equal renderSettings.Count. If renderSettings is null
            then Custom Render settings will not be used. If any items in renbderSettings are null then the corresponding layer will not
            use CustomRenderSettings</para>
            <para>
            Not used yet!
            </para>
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.TiledMapHandler.ProcessGetShapeAttributesRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:EGIS.Web.Controls.TiledMapHandler.GetRecordAttributes(System.Web.HttpContext,EGIS.ShapeFileLib.ShapeFile,System.Int32)">
            <summary>
            returns a list of key/values for each attributes of a record
            </summary>
            <param name="context"></param>
            <param name="layer"></param>
            <param name="recordIndex"></param>
            <returns></returns>
            <remarks>
            The default implementation will return a key/value for every attributes.
            If you wish to add additional attributes, perhaps by joining on another table, or exclude
            some attributes override this method
            </remarks>
        </member>
        <member name="T:EGIS.Web.Controls.TiledSFMap">
            <summary>
            ASP .NET Mapping Control which loads and displays an Easy GIS .NET map project in a web page using map tile images.
            </summary>
            <remarks>    
            <para>This control is similar to the SFMap Control, but it uses a tile approach to take advantage of caching on
            client's web-browsers to provide much faster map interaction.</para>
            <para>Note that in order to use the SFMap the displayed project must be using
            lat long degree coordinates as the map will use a Mercator Projection
            </para>
            <para>
            Tiles are organised in a manner similar to the approach used by google maps and bing maps. Each tiles dimension is 256x256 pixels.
            A tile request is made up of a zoom-level between 0 and 16(inclusive), tile x-ccord and a tile y-ccord. At zoom-level
            0 the entire world (-180 lon -> +180 lon) is scaled to fit in 1 tile. At level 1 the world will fit
            in 2 tiles x 2 tiles, at level 2 the world will fit into 4 tiles x 4 tiles, .. etc.     
            </para>
            <para>Tiles are numbered from zero in the upper left corner to (NumTiles at zoom-level)-1 as below:</para>
            <para>
            <code>
            (0,0) (1,0) (2,0) ..
            (0,1) (1,1) (2,1) ..
            (0,2) (1,2) (2,2) ..
            ..
            </code>
            </para>
            <para>An Easy GIS .NET project is composed of a number of Shapefiles and can be designed using the Desktop Edition of 
            Easy GIS .NET. The project should be exported and copied to the web server hosting the page where the TiledSFMap Web Control will be used. For more 
            information on how to export a project ready to load in a web page see <a href = "http://www.easygisdotnet.com/api">Easy GIS .NET Developers page</a>
            The TiledSFMap Control generates all map images on the hosting web server using an IHttpHandler. All requests are performed automatically on the 
            client's web browser using JavaScript and AJAX, resulting in a map that can be panned and zoomed in or out without refreshing the
            web page for each request.
            </para>
            <para>    
            NOTE: In order for the server to render maps an entry in the httpHandlers section of the web.config file must be made.
            If the TiledSFMap Control is added to a page using the design view in Visual Studio an entry is added to the web.config file automatically, however
            if the Control is manually added to a page it will be neccessary to add the following section to the config file.
            <code>
            &lt;httpHandlers&gt;
                   &lt;add path="egismaptiled.axd" verb="*" type="EGIS.Web.Controls.SFMapImageProvider, EGIS.Web.Controls, Version=2.3.0.0, Culture=neutral, PublicKeyToken=05b98c869b5ffe6a"
                       validate="true" /&gt;
               &lt;/httpHandlers&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.OnInit(System.EventArgs)">
            <summary>
            overrides OnInit in WebControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.TagKey">
            <summary>
            overrides the TagKey property. Returns a Div Tag.
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.CreateChildControls">
            <summary>
            overrides CreateChildControls in CompositeControl
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.GisImageClientId">
            <summary>
            returns the Client id of the internal  GIS Image. This is used by controls only
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.ClientJSResouceName">
            <summary>
            returns the name of the client javascript resource used to control the map.
            </summary>
            <remarks>
            <para>this method implements the ClientJSResouceName method of ISFMap interface</para>
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.ControlId">
            <summary>
            returns the client id of the map
            </summary>
            <remarks>
            <para>this method implements the ClientJSResouceName method of ISFMap interface</para>
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.OnPreRender(System.EventArgs)">
            <summary>
            overrides OnPreRender in CompositeControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.CreateMap">
            <summary>
            Reads the EGIS shapefile project and creates the map
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.LayerCount">
            <summary>
            returns the number of layers in the TiledSFMap Control
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.GetLayer(System.Int32)">
            <summary>
            Method to get a ShapeFile layer at the specified index
            </summary>
            <param name="index">zero-based index of layer to return</param>
            <returns> The requested ShapeFile layer</returns>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.SetCustomRenderSettings(System.Int32,EGIS.ShapeFileLib.ICustomRenderSettings)">
            <summary>
            Applies custom render settings to the specified layer
            </summary>
            <remarks>
            <para>
            The ICustomRenderSettings object is stored in the session settings, meaning that the custom render settings are 
            applied per user's session.
            </para>
            <para>If Custom Render Settings are used then it is usualy neccessary to set CacheOnClient to False
            </para>
            
            </remarks>
            <param name="layerIndex">The zero-based index of the layer to apply the custom render settings</param>
            <param name="settings">An ICustomRenderSettings object to set on the specified shapefile</param>        
            <seealso cref="T:EGIS.ShapeFileLib.ICustomRenderSettings"/>
            <seealso cref="T:EGIS.Web.Controls.QuantileCustomRenderSettings"/>
            <seealso cref="P:EGIS.Web.Controls.TiledSFMap.CacheOnClient"/>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.ClearCustomRenderSettings">
            <summary>
            Clears any ICustomRenderSettings previously set on the layers of the map
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> object that receives the control content.</param>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.RegisterHandlerInConfiguration">
            <summary>
            Registers the Http Handler in configuration.
            </summary>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.RenderDesignTime(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control at design time.
            </summary>
            <param name="writer">The html writer.</param>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.Extent">
            <summary>
            Gets the rectangular extent of the entire map
            </summary>
            <remarks>
            Extent is the rectangular extent of the ENTIRE map, regardless of the current ZoomLevel or CentrePoint.  
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.ImageSource">
            <summary>
            Gets the image real src that points to the http handler.
            It is used as a key for the server cache so shoud be overriden with caution.
            </summary>
            <value>The image src.</value>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.HttpHandlerType">
            <summary>
            Gets the type of the http handler used to render the map on the server.
            </summary>        
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.HttpHandlerName">
            <summary>
            Gets the name of the http handler used to render the map on the server.
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.ProjectName">
            <summary>
            Gets or sets the name of the Easy GIS .NET (.egp) project to load in the map.
            </summary>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.CenterPoint">
            <summary>
            Gets or sets the center point of the map in mapping coordinates (as used by the shapefiles)
            </summary>
            <remarks>
            Changing the CenterPoint can be used to center the map on a new location without 
            changing the map scale
            <para>
            The ZoomLevel, CenterPoint, Width and Height of the TiledSFMap determine the location and visible area of the rendered map. The map will be rendered 
            centered at the CenterPoint and scaled according to the ZoomLevel.
            </para>
            </remarks>
            <seealso cref="!:Zoom"/>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.ZoomLevel">
            <summary>
            Gets or sets the current ZoomLevel of the TiledSFMap
            </summary>
            <remarks>
            Changing the ZoomLevel will zoom into or out of the map. Increasing the ZoomLevel will zoom into the map, while decreasing the 
            ZoomLevel will zoom out of the map
            <para>
            The ZoomLevel, CenterPoint, Width and Height of the TiledSFMap determine the location and visible area of the rendered map. The map will be rendered 
            centered at the CenterPoint and scaled according to the ZoomLevel.
            </para>
            </remarks>
            <seealso cref="P:EGIS.Web.Controls.TiledSFMap.CenterPoint"/>
            <exception cref="T:System.ArgumentException"> if ZoomLevel less than or equal to zero</exception>        
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.MinZoomLevel">
            <summary>
            Gets or Sets the Minimum Allowed ZoomLevel. This is the minimum ZoomLevel that can be set before 
            the map can no longer be zoomed out.
            </summary>     
            <seealso cref="P:EGIS.Web.Controls.TiledSFMap.MaxZoomLevel"/>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.MaxZoomLevel">
            <summary>
            Gets or Sets the Maximum Allowed ZoomLevel. This is the maximum ZoomLevel that can be set before 
            the map can no longer be zoomed in.
            </summary>        
            <seealso cref="P:EGIS.Web.Controls.TiledSFMap.MinZoomLevel"/>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.OnClientZoomChanged">
             <summary>
             Gets or sets the client-side script that executes when the map ZoomLevel changes
             </summary>
             <remarks>
             When the zoom level changes a client-side javascript event will be fired with the the following 3 parameters
             <list type="bullet">
             <item>
             <term>type</term>
             <description>The event type (="ZoomChanged"). This can be ignored</description>
             </item>
             <item>
             <term>args</term>
             <description>args[0] contains the current zoom level</description>
             </item>
             <item>
             <term>obj</term>
             <description>The object generating the event. This can be ignored.</description>
             </item>
             </list>
             
             <example>
             <code>        
             function MapZoomChanged(type, args, obj)
            {        
                var debugpanel = document.getElementById('debugpanel');
                debugpanel.innerHTML = '[' + obj.toString() + ',' + type + ']Current Zoom: ' + args[0] + '&lt;br/&gt;' + debugpanel.innerHTML;        
            }
             ..
             &lt;div id = "debugpanel" ..
             </code>
             In this example OnClientZoomChanged would be set to "MapZoomChanged"
             </example>
             </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.OnClientBoundsChanged">
             <summary>
             Gets or sets the client-side script that executes when the map Bounds are changed
             </summary>
             <remarks>
             When the map bounds change a client-side javascript event will be fired with the the following 3 parameters
             <list type="bullet">
             <item>
             <term>type</term>
             <description>The event type (="BoundsChanged"). This can be ignored</description>
             </item>
             <item>
             <term>args</term>
             <description>The new map bounds. args[0] contains MinX, args[1] contains MaxY, args[2] contains MaxX, args[3] contains MaxY</description>
             </item>
             <item>
             <term>obj</term>
             <description>The object generating the event. This can be ignored.</description>
             </item>
             </list>
             
             <example>
             <code>        
            function MapBoundsChanged(type, args, obj)
            {
               var debugPanel = document.getElementById('debugpanel');            
               debugPanel.innerHTML = '[' + obj.toString() + ',' + type + ']Current Bounds: ' + args[0] + ',' + args[1] +  ',' + args[2] + ',' + args[3] + '<br/>' + debugPanel.innerHTML ;
            }
             ..
             &lt;div id = "debugpanel" ..
             </code>
             In this example OnClientBoundsChanged would be set to "MapBoundsChanged"
             </example>
             </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.CacheOnClient">
            <summary>
            Gets or sets whether to use client-side caching of any generated map image.
            </summary>
            <remarks>
            <para>By default CacheOnClient will be set to true. This means that cache-specific HTTP headers will be set on generated
            map images. This will generally improve map performance as successive map images are cached by client web-browsers, however in
            some cases this is not desirable.</para>
            <para>If you are using CustomRenderSettings then it may be neccessary to set CacheOnClient ot False</para>        
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.CacheOnServer">
            <summary>
            Gets or sets whether to use server-side caching of any generated map tile image.
            </summary>
            <remarks>
            <para>By default CacheOnServer will be set to false. If this property is set to true then ServerCacheDirectoryUrl
            must be set to a directory with appropriate write permissions. If images are cached on server then the processing overhead of
            rendering map image requests will not be required on the server, but there must be sufficient space on the server to
            store images.</para>
            <para>If you are using CustomRenderSettings then it may be neccessary to set CacheOnServer to False</para>        
            </remarks>
        </member>
        <member name="P:EGIS.Web.Controls.TiledSFMap.ServerCacheDirectoryUrl">
            <summary>
            The Url of the directory where image tiles will be cached on the server if <see cref="P:EGIS.Web.Controls.TiledSFMap.CacheOnServer"/> is set to true        
            </summary>
            <remarks>
            <para>Note that it may be neccessary to give appropriate write permissions to the ASP user account
            on the specified directory </para>
            <para>If CacheOnServer is false then this parameter will be ignored
            </para>        
            </remarks>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.LoadViewState(System.Object)">
            <summary>
            Overrides LoadViewState method in WebControl
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:EGIS.Web.Controls.TiledSFMap.RenderMap(System.Drawing.Image,System.Web.HttpContext)">
            <summary>
            Convenience method to render the current map to a bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="context"></param>
        </member>
    </members>
</doc>
